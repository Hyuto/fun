{"version":3,"sources":["utils/tools.ts","utils/DataHandler.tsx","components/Bar/Bar.tsx","components/Spinner/Spinner.tsx","views/Main/main.tsx","views/AddUpdate/AddUpdate.tsx","components/SpinningLogo/logo.svg","components/SpinningLogo/SpinningLogo.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Instance","axios","create","baseURL","ContextData","React","createContext","DataHandler","children","useState","data","setData","UpdateData","useCallback","id","newData","map","element","DeleteData","filter","useEffect","get","then","response","Provider","value","Bar","callback","useContext","open","setOpen","Handler","a","complete","put","status","className","color","onClick","e","stopPropagation","toggle","title","delete","description","deadline","Spinner","Main","loading","todos","sort","b","console","log","AddUpdate","typeform","useForm","register","handleSubmit","reset","setStatus","statusIcon","setStatusIcon","makeMessage","message","elements","push","size","onSubmit","new_data","type","post","res","statusText","catch","error","initData","required","maxLength","SpinningLogo","src","logo","alt","App","auWindow","setAUWindow","typeWindow","settypeWindow","windowHandler","action","Error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a69d61b2.chunk.js","sourcesContent":["import axios, { AxiosInstance } from \"axios\";\r\n\r\nconst END_POINT: string =\r\n  process.env.NODE_ENV === \"development\"\r\n    ? \"http://127.0.0.1:8000/api/\"\r\n    : \"https://django-todos-application.herokuapp.com/api/\";\r\n\r\nexport const Instance: AxiosInstance = axios.create({\r\n  baseURL: END_POINT,\r\n});\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { Instance } from './tools';\r\n\r\nexport type SetData = React.Dispatch<React.SetStateAction<ToDos[] | null>>;\r\nexport type UpdateData = (id: number, newData: ToDos) => void;\r\nexport type DeleteData = (id: number) => void;\r\n\r\ninterface ContextProps {\r\n    data: ToDos[] | null;\r\n    setData: SetData;\r\n    UpdateData: UpdateData;\r\n    DeleteData: DeleteData;\r\n}\r\n\r\nexport const ContextData = React.createContext<Partial<ContextProps>>({});\r\n\r\nconst DataHandler: React.FC = ({ children }) => {\r\n    const [data, setData] = useState<ToDos[] | null>(null);\r\n\r\n    const UpdateData = useCallback((id: number, newData: ToDos) => {\r\n        setData((data as ToDos[]).map(element => {\r\n            if (element.id === id)\r\n                element = newData;\r\n            return element;\r\n        }))\r\n    }, [data])\r\n\r\n    const DeleteData = useCallback((id: number) => {\r\n        setData((data as ToDos[]).filter(element => element.id !== id));\r\n    }, [data])\r\n\r\n    useEffect(() => {\r\n        Instance.get('.').then(response => {\r\n            setData(response.data);\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <ContextData.Provider value={{\r\n            data: data,\r\n            setData: setData,\r\n            UpdateData: UpdateData,\r\n            DeleteData: DeleteData\r\n        }}>\r\n            {children}\r\n        </ContextData.Provider>\r\n    )\r\n}\r\n\r\nexport default DataHandler;","import React, { useState, useContext } from 'react';\r\nimport { FaCheck, FaTimes, FaTrash } from 'react-icons/fa';\r\nimport { Instance } from '../../utils/tools';\r\nimport { ContextData, UpdateData, DeleteData } from '../../utils/DataHandler';\r\nimport './Bar.scss';\r\n\r\nconst toggle = (status: string): string => {\r\n    status = status === \"hidden\" ? \"show\" : \"hidden\";\r\n    return status;\r\n};\r\n\r\nconst Bar: React.FC<{ data: ToDos, callback: typeof Callback }> =\r\n    ({ data, callback }) => {\r\n        const { UpdateData, DeleteData } = useContext(ContextData);\r\n        const [open, setOpen] = useState<string>('hidden');\r\n\r\n        const Handler = async () => {\r\n            data.complete = !data.complete;\r\n            await Instance.put(`${data.id}/`, data).then((response) => {\r\n                (UpdateData as UpdateData)(data.id, response.data);\r\n            })\r\n        }\r\n\r\n        const getStatus = ({ complete }: ToDos): JSX.Element => {\r\n            return complete ?\r\n                <FaCheck className=\"icon\" color=\"#17d2e8\"\r\n                    onClick={(e) => {\r\n                        e.stopPropagation();\r\n                        Handler();\r\n                    }} /> :\r\n                <FaTimes className=\"icon\" color=\"gray\"\r\n                    onClick={(e) => {\r\n                        e.stopPropagation();\r\n                        Handler();\r\n                    }} />\r\n        }\r\n\r\n        const status = getStatus(data);\r\n\r\n        return (\r\n            <div key={data.id} id={`todos-${data.id}`} className=\"Bar\">\r\n                <div className=\"head\" onClick={() => setOpen(toggle(open))}>\r\n                    <div className=\"text\">\r\n                        {data.title}\r\n                    </div>\r\n                    <div className=\"icons\">\r\n                        {status}\r\n                        <FaTrash className=\"icon\" color=\"#e81d17\"\r\n                            onClick={async (e) => {\r\n                                e.stopPropagation();\r\n                                Instance.delete(`${data.id}/`).then(() => {\r\n                                    (DeleteData as DeleteData)(data.id);\r\n                                });\r\n                            }} />\r\n                    </div>\r\n                </div>\r\n                <div className={`desc ${open}`}>\r\n                    <div className=\"info\">\r\n                        <p className=\"sub-info\">\r\n                            <strong>Description</strong> : {data.description}\r\n                        </p>\r\n                        <p className=\"sub-info\">\r\n                            <strong>Deadline</strong> : {data.deadline ?\r\n                                data.deadline : 'Not Listed'}\r\n                        </p>\r\n                        <p className=\"sub-info\">\r\n                            <strong>Status</strong> : {data.complete ?\r\n                                'Finished' : data.complete === false ?\r\n                                    'Not Finished' : 'Unknown'}\r\n                        </p>\r\n                    </div>\r\n                    <div className=\"update-btn\" onClick={() => {\r\n                        callback('update', data);\r\n                    }}>\r\n                        Update Data\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\nexport default Bar;","import React from \"react\";\r\nimport './Spinner.scss';\r\n\r\nconst Spinner: React.FC = () => {\r\n    return (\r\n        <div className=\"spinner\">\r\n            <div className=\"double-bounce1\"></div>\r\n            <div className=\"double-bounce2\"></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Spinner;","import React, { useContext } from \"react\";\r\nimport './main.scss'\r\nimport Bar from \"../../components/Bar/Bar\";\r\nimport Spinner from \"../../components/Spinner/Spinner\";\r\nimport { ContextData } from \"../../utils/DataHandler\";\r\n\r\nconst Main: React.FC<{ callback: typeof Callback }> = ({ callback }) => {\r\n    const { data } = useContext(ContextData);\r\n    const loading = data === null ? 'loading' : 'complete';\r\n\r\n    const sorting = (a: ToDos, b: ToDos): number => {\r\n        if (a.title < b.title) {\r\n            return -1;\r\n        } else if (a.title > b.title) {\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    const todos = data === null ? null : (data as ToDos[]).sort(sorting)\r\n        .map((e) => {\r\n            return <Bar key={e.id} data={e} callback={callback} />;\r\n        })\r\n\r\n    console.log('main.tsx');\r\n\r\n    return (\r\n        <>\r\n            <div className=\"btn-wrapper\">\r\n                <div className={`add-btn ${loading !== 'complete' ?\r\n                    'nonactive' : ''}`} onClick={() => {\r\n                        if (loading === 'complete')\r\n                            callback('add')\r\n                    }}>\r\n                    Add To Do\r\n                </div>\r\n            </div>\r\n            <div className=\"list-wrapper\">\r\n                <div className={loading}>\r\n                    <Spinner />\r\n                </div>\r\n                <div className='list'>\r\n                    {todos}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Main;","import React, { useState, useContext, useEffect } from \"react\";\r\nimport './AddUpdate.scss'\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Instance } from \"../../utils/tools\";\r\nimport { ContextData, SetData } from \"../../utils/DataHandler\";\r\nimport { FaCheckCircle } from \"react-icons/fa\";\r\nimport { ImCross } from \"react-icons/im\";\r\n\r\ninterface WindowType {\r\n    type: string;\r\n    data?: ToDos;\r\n}\r\n\r\nconst AddUpdate: React.FC<{\r\n    className: string, callback: typeof Callback,\r\n    typeform: WindowType\r\n}> = ({ className, callback, typeform }) => {\r\n    const { data, setData } = useContext(ContextData);\r\n    const { register, handleSubmit, reset } = useForm<ToDos>();\r\n    const [status, setStatus] = useState('close');\r\n    const [statusIcon, setStatusIcon] = useState<JSX.Element[] | null>(null);\r\n\r\n    const makeMessage = (status: string, message: string) => {\r\n        const elements: JSX.Element[] = [];\r\n\r\n        if (status === 'success')\r\n            elements.push(<FaCheckCircle key=\"icon\" className=\"icons\"\r\n                size={40} color='green' />);\r\n        else\r\n            elements.push(<ImCross key=\"icon\" className=\"icons\"\r\n                size={40} color='red' />);\r\n        elements.push(<div key=\"message\" className=\"message\">{message}</div>);\r\n\r\n        return elements;\r\n    }\r\n\r\n    const onSubmit = async (new_data: ToDos) => {\r\n        if (typeform.type === 'Create') {\r\n            await Instance.post('.', new_data).then(res => {\r\n                (data as ToDos[]).push(res.data);\r\n                (setData as SetData)(data as ToDos[]);\r\n\r\n                setStatus('open');\r\n                setStatusIcon(makeMessage('success', res.statusText));\r\n            }).catch((error) => {\r\n                setStatus('open');\r\n                setStatusIcon(makeMessage('fail', error.message));\r\n            })\r\n        } else if (typeform.type === 'Update') {\r\n            await Instance.put(`./${typeform.data?.id}/`, new_data).then(res => {\r\n                (setData as SetData)((data as ToDos[]).map((element) => {\r\n                    if (element.id === typeform.data?.id)\r\n                        element = res.data;\r\n                    return element;\r\n                }));\r\n\r\n                setStatus('open');\r\n                setStatusIcon(makeMessage('success', res.statusText));\r\n            }).catch((error) => {\r\n                setStatus('open');\r\n                setStatusIcon(makeMessage('fail', error.message));\r\n            })\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const initData = {\r\n            title: '',\r\n            description: '',\r\n            complete: false,\r\n            deadline: null\r\n        } as ToDos\r\n\r\n        if (typeform.type === 'Update') {\r\n            initData.title = typeform.data?.title as string;\r\n            initData.description = typeform.data?.description as string;\r\n            initData.complete = typeform.data?.complete as boolean;\r\n            initData.deadline = typeform.data?.deadline as string;\r\n        }\r\n        reset(initData);\r\n    }, [typeform, reset])\r\n\r\n    return (\r\n        <div className={`new-update ${className}`}>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <label>Title</label>\r\n                <input {...register('title', {\r\n                    required: true,\r\n                    maxLength: 200\r\n                })} />\r\n\r\n                <label>Description</label>\r\n                <input {...register(\"description\", { required: true })} />\r\n\r\n                <label>Status</label>\r\n                <input type=\"checkbox\" {...register(\"complete\")} />\r\n\r\n                <label>Deadline</label>\r\n                <input type=\"date\" {...register(\"deadline\")} />\r\n\r\n                <div className=\"btn-wrapper\">\r\n                    <input className=\"btn submit\" type=\"submit\"\r\n                        value={typeform.type} />\r\n                    <div className=\"btn cancel\" onClick={() => {\r\n                        callback('close');\r\n                    }}>\r\n                        Cancel\r\n                    </div>\r\n                </div>\r\n\r\n                <div className={`status ${status}`} onClick={() => {\r\n                    setStatus('close');\r\n                    setStatusIcon(null);\r\n                    callback('close');\r\n                }}>\r\n                    {statusIcon}\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddUpdate;","export default __webpack_public_path__ + \"static/media/logo.53c5bd1e.svg\";","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './SpinningLogo.scss';\r\n\r\nconst SpinningLogo: React.FC = () => {\r\n  return (\r\n    <>\r\n      <img src={logo} className=\"spinning-logo\" alt=\"logo\" />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SpinningLogo;","import React, { useState, useCallback } from \"react\";\r\nimport \"./App.scss\";\r\nimport Main from \"./views/Main/main\";\r\nimport AddUpdate from \"./views/AddUpdate/AddUpdate\";\r\nimport SpinningLogo from \"./components/SpinningLogo/SpinningLogo\";\r\nimport DataHandler from \"./utils/DataHandler\";\r\n\r\ninterface WindowType {\r\n  type: string;\r\n  data?: ToDos;\r\n}\r\n\r\nconst App: React.FC = () => {\r\n  const [auWindow, setAUWindow] = useState<string>('close');\r\n  const [typeWindow, settypeWindow] = useState<WindowType>({ type: 'Create' });\r\n\r\n  console.log('App.tsx');\r\n\r\n  const windowHandler = useCallback((action, data?) => {\r\n    switch (action) {\r\n      case 'add':\r\n        settypeWindow({ type: 'Create' });\r\n        setAUWindow('open');\r\n        break;\r\n      case 'update':\r\n        settypeWindow({ type: 'Update', data: data });\r\n        setAUWindow('open');\r\n        break;\r\n      case 'close':\r\n        setAUWindow('close');\r\n        break;\r\n      default:\r\n        Error('Undefined action!');\r\n        break;\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <SpinningLogo />\r\n      </header>\r\n      <main>\r\n        <div className=\"container\">\r\n          <div className=\"title\">\r\n            <h2>React To Do's App</h2>\r\n          </div>\r\n          <div className=\"todos\">\r\n            <DataHandler>\r\n              <Main callback={windowHandler} />\r\n              <AddUpdate className={auWindow} callback={windowHandler}\r\n                typeform={typeWindow} />\r\n            </DataHandler>\r\n          </div>\r\n        </div>\r\n      </main>\r\n    </div >\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}